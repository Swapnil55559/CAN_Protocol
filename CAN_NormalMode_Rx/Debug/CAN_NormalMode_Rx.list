
CAN_NormalMode_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000059fb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000012ba  00000000  00000000  00025a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000528  00000000  00000000  00026d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003c0  00000000  00000000  00027260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001943a  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006590  00000000  00000000  00040a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000949e9  00000000  00000000  00046fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001378  00000000  00000000  000db9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000dcd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c08 	.word	0x08002c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c08 	.word	0x08002c08

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[8];

uint8_t flag = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001d2:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001d4:	2100      	movs	r1, #0
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f000 fc99 	bl	8000b0e <HAL_CAN_GetRxMessage>

	if(RxData[0] ==4&& RxData[1] == 200){
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d106      	bne.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001e6:	785b      	ldrb	r3, [r3, #1]
 80001e8:	2bc8      	cmp	r3, #200	; 0xc8
 80001ea:	d102      	bne.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		flag = 1;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
	}
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	20000050 	.word	0x20000050
 8000204:	20000074 	.word	0x20000074

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 f9eb 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f82f 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f8c3 	bl	80003a0 <MX_GPIO_Init>
  MX_CAN_Init();
 800021a:	f000 f86d 	bl	80002f8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800021e:	4811      	ldr	r0, [pc, #68]	; (8000264 <main+0x5c>)
 8000220:	f000 fc31 	bl	8000a86 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000224:	2102      	movs	r1, #2
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0x5c>)
 8000228:	f000 fd93 	bl	8000d52 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(flag){
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x60>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0fb      	beq.n	800022c <main+0x24>
		for(uint8_t i = 0; i < RxData[0]; i++){
 8000234:	2300      	movs	r3, #0
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e00b      	b.n	8000252 <main+0x4a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800023a:	2108      	movs	r1, #8
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <main+0x64>)
 800023e:	f001 fa79 	bl	8001734 <HAL_GPIO_TogglePin>
			HAL_Delay(RxData[1]);
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x68>)
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa34 	bl	80006b4 <HAL_Delay>
		for(uint8_t i = 0; i < RxData[0]; i++){
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	3301      	adds	r3, #1
 8000250:	71fb      	strb	r3, [r7, #7]
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x68>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3ee      	bcc.n	800023a <main+0x32>
		}

		flag = 0;
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <main+0x60>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
	if(flag){
 8000262:	e7e3      	b.n	800022c <main+0x24>
 8000264:	20000028 	.word	0x20000028
 8000268:	20000074 	.word	0x20000074
 800026c:	48000400 	.word	0x48000400
 8000270:	2000006c 	.word	0x2000006c

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fc94 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fa57 	bl	8001768 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c0:	f000 f8ac 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fa80 	bl	80027e4 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ea:	f000 f897 	bl	800041c <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	; 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002fe:	4b26      	ldr	r3, [pc, #152]	; (8000398 <MX_CAN_Init+0xa0>)
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <MX_CAN_Init+0xa4>)
 8000302:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_CAN_Init+0xa0>)
 8000306:	2204      	movs	r2, #4
 8000308:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <MX_CAN_Init+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_CAN_Init+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <MX_CAN_Init+0xa0>)
 8000318:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800031c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_CAN_Init+0xa0>)
 8000320:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000324:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <MX_CAN_Init+0xa0>)
 8000328:	2200      	movs	r2, #0
 800032a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_CAN_Init+0xa0>)
 800032e:	2200      	movs	r2, #0
 8000330:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_CAN_Init+0xa0>)
 8000334:	2200      	movs	r2, #0
 8000336:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_CAN_Init+0xa0>)
 800033a:	2200      	movs	r2, #0
 800033c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_CAN_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_CAN_Init+0xa0>)
 8000346:	2200      	movs	r2, #0
 8000348:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800034a:	4813      	ldr	r0, [pc, #76]	; (8000398 <MX_CAN_Init+0xa0>)
 800034c:	f000 f9d6 	bl	80006fc <HAL_CAN_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000356:	f000 f861 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800035a:	2301      	movs	r3, #1
 800035c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800035e:	230a      	movs	r3, #10
 8000360:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x303<<5;
 8000366:	f246 0360 	movw	r3, #24672	; 0x6060
 800036a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x303<<5;
 8000370:	f246 0360 	movw	r3, #24672	; 0x6060
 8000374:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800037e:	2301      	movs	r3, #1
 8000380:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan,&canfilterconfig);
 8000386:	463b      	mov	r3, r7
 8000388:	4619      	mov	r1, r3
 800038a:	4803      	ldr	r0, [pc, #12]	; (8000398 <MX_CAN_Init+0xa0>)
 800038c:	f000 fab1 	bl	80008f2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	; 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028
 800039c:	40006400 	.word	0x40006400

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_GPIO_Init+0x74>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <MX_GPIO_Init+0x74>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_GPIO_Init+0x74>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_GPIO_Init+0x74>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <MX_GPIO_Init+0x74>)
 80003d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_GPIO_Init+0x74>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2108      	movs	r1, #8
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <MX_GPIO_Init+0x78>)
 80003ec:	f001 f98a 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003f0:	2308      	movs	r3, #8
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	4619      	mov	r1, r3
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_GPIO_Init+0x78>)
 8000408:	f001 f80a 	bl	8001420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	48000400 	.word	0x48000400

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x44>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x44>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_MspInit+0x44>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_MspInit+0x44>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <HAL_CAN_MspInit+0x90>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d131      	bne.n	80004f6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <HAL_CAN_MspInit+0x94>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <HAL_CAN_MspInit+0x94>)
 8000498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <HAL_CAN_MspInit+0x94>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_CAN_MspInit+0x94>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_CAN_MspInit+0x94>)
 80004b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_CAN_MspInit+0x94>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004d4:	2309      	movs	r3, #9
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 ff9d 	bl	8001420 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2014      	movs	r0, #20
 80004ec:	f000 ff61 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80004f0:	2014      	movs	r0, #20
 80004f2:	f000 ff7a 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40006400 	.word	0x40006400
 8000504:	40021000 	.word	0x40021000

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000554:	f000 f88e 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <CAN_RX0_IRQHandler+0x10>)
 8000562:	f000 fc1c 	bl	8000d9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028

08000570 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000598:	f7ff ffea 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	; (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	; (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c2:	f002 fafd 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c6:	f7ff fe1f 	bl	8000208 <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d8:	08002c58 	.word	0x08002c58
  ldr r2, =_sbss
 80005dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x28>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 fecf 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	200f      	movs	r0, #15
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff ff10 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fee7 	bl	8001406 <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f000 feaf 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000008 	.word	0x20000008
 8000670:	20000004 	.word	0x20000004

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008
 8000698:	20000078 	.word	0x20000078

0800069c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000078 	.word	0x20000078

080006b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff ffee 	bl	800069c <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffde 	bl	800069c <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e0ed      	b.n	80008ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fea8 	bl	8000470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000730:	f7ff ffb4 	bl	800069c <HAL_GetTick>
 8000734:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000736:	e012      	b.n	800075e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000738:	f7ff ffb0 	bl	800069c <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d90b      	bls.n	800075e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2205      	movs	r2, #5
 8000756:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0c5      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0e5      	beq.n	8000738 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0202 	bic.w	r2, r2, #2
 800077a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800077c:	f7ff ff8e 	bl	800069c <HAL_GetTick>
 8000780:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000782:	e012      	b.n	80007aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000784:	f7ff ff8a 	bl	800069c <HAL_GetTick>
 8000788:	4602      	mov	r2, r0
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2b0a      	cmp	r3, #10
 8000790:	d90b      	bls.n	80007aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2205      	movs	r2, #5
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e09f      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e5      	bne.n	8000784 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7e5b      	ldrb	r3, [r3, #25]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d108      	bne.n	80007fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e007      	b.n	800080c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e9b      	ldrb	r3, [r3, #26]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0220 	orr.w	r2, r2, #32
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e007      	b.n	8000836 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0220 	bic.w	r2, r2, #32
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7edb      	ldrb	r3, [r3, #27]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0210 	bic.w	r2, r2, #16
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e007      	b.n	8000860 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0210 	orr.w	r2, r2, #16
 800085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7f1b      	ldrb	r3, [r3, #28]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0208 	orr.w	r2, r2, #8
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e007      	b.n	800088a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0208 	bic.w	r2, r2, #8
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7f5b      	ldrb	r3, [r3, #29]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d108      	bne.n	80008a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0204 	orr.w	r2, r2, #4
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0204 	bic.w	r2, r2, #4
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	ea42 0103 	orr.w	r1, r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2201      	movs	r2, #1
 80008e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b087      	sub	sp, #28
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000908:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800090a:	7cfb      	ldrb	r3, [r7, #19]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d003      	beq.n	8000918 <HAL_CAN_ConfigFilter+0x26>
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	2b02      	cmp	r3, #2
 8000914:	f040 80aa 	bne.w	8000a6c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800091e:	f043 0201 	orr.w	r2, r3, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f003 031f 	and.w	r3, r3, #31
 8000930:	2201      	movs	r2, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	43db      	mvns	r3, r3
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d123      	bne.n	800099a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43db      	mvns	r3, r3
 800095c:	401a      	ands	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000974:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3248      	adds	r2, #72	; 0x48
 800097a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800098e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000990:	6979      	ldr	r1, [r7, #20]
 8000992:	3348      	adds	r3, #72	; 0x48
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d122      	bne.n	80009e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3248      	adds	r2, #72	; 0x48
 80009c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009de:	6979      	ldr	r1, [r7, #20]
 80009e0:	3348      	adds	r3, #72	; 0x48
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a02:	e007      	b.n	8000a14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d109      	bne.n	8000a30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a2e:	e007      	b.n	8000a40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d107      	bne.n	8000a58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	431a      	orrs	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a5e:	f023 0201 	bic.w	r2, r3, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e006      	b.n	8000a7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
  }
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	371c      	adds	r7, #28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d12e      	bne.n	8000af8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ab2:	f7ff fdf3 	bl	800069c <HAL_GetTick>
 8000ab6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ab8:	e012      	b.n	8000ae0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aba:	f7ff fdef 	bl	800069c <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d90b      	bls.n	8000ae0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e012      	b.n	8000b06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1e5      	bne.n	8000aba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e006      	b.n	8000b06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
  }
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b087      	sub	sp, #28
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b22:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d003      	beq.n	8000b32 <HAL_CAN_GetRxMessage+0x24>
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	f040 8103 	bne.w	8000d38 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10e      	bne.n	8000b56 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d116      	bne.n	8000b74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0f7      	b.n	8000d46 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e0e8      	b.n	8000d46 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	331b      	adds	r3, #27
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	4413      	add	r3, r2
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0204 	and.w	r2, r3, #4
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10c      	bne.n	8000bac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	331b      	adds	r3, #27
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	0d5b      	lsrs	r3, r3, #21
 8000ba2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	331b      	adds	r3, #27
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	331b      	adds	r3, #27
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0202 	and.w	r2, r3, #2
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	331b      	adds	r3, #27
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	4413      	add	r3, r2
 8000be6:	3304      	adds	r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	e00b      	b.n	8000c12 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	331b      	adds	r3, #27
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	3304      	adds	r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 020f 	and.w	r2, r3, #15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	331b      	adds	r3, #27
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	331b      	adds	r3, #27
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	4413      	add	r3, r2
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0a1a      	lsrs	r2, r3, #8
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	0c1a      	lsrs	r2, r3, #16
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	3302      	adds	r3, #2
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	4413      	add	r3, r2
 8000c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0e1a      	lsrs	r2, r3, #24
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3303      	adds	r3, #3
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4413      	add	r3, r2
 8000cc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0a1a      	lsrs	r2, r3, #8
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	3305      	adds	r3, #5
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	0c1a      	lsrs	r2, r3, #16
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3306      	adds	r3, #6
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0e1a      	lsrs	r2, r3, #24
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	3307      	adds	r3, #7
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	e007      	b.n	8000d34 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0220 	orr.w	r2, r2, #32
 8000d32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e006      	b.n	8000d46 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
  }
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d62:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d002      	beq.n	8000d70 <HAL_CAN_ActivateNotification+0x1e>
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d109      	bne.n	8000d84 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6959      	ldr	r1, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e006      	b.n	8000d92 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
  }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b08a      	sub	sp, #40	; 0x28
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d07c      	beq.n	8000ede <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f983 	bl	800110c <HAL_CAN_TxMailbox0CompleteCallback>
 8000e06:	e016      	b.n	8000e36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1a:	e00c      	b.n	8000e36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2e:	e002      	b.n	8000e36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f989 	bl	8001148 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d024      	beq.n	8000e8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f963 	bl	8001120 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e5a:	e016      	b.n	8000e8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e00c      	b.n	8000e8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d004      	beq.n	8000e84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	e002      	b.n	8000e8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f969 	bl	800115c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d024      	beq.n	8000ede <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f943 	bl	8001134 <HAL_CAN_TxMailbox2CompleteCallback>
 8000eae:	e016      	b.n	8000ede <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	e00c      	b.n	8000ede <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	e002      	b.n	8000ede <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f949 	bl	8001170 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00c      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2210      	movs	r2, #16
 8000f00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f930 	bl	8001184 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d009      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f943 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00c      	beq.n	8000f66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2210      	movs	r2, #16
 8000f64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2208      	movs	r2, #8
 8000f80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f912 	bl	80011ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f8f9 	bl	8001198 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f8fc 	bl	80011c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f8f5 	bl	80011d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d07b      	beq.n	80010ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d072      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001058:	2b00      	cmp	r3, #0
 800105a:	d043      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d03e      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800106c:	2b60      	cmp	r3, #96	; 0x60
 800106e:	d02b      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x32a>
 8001070:	2b60      	cmp	r3, #96	; 0x60
 8001072:	d82e      	bhi.n	80010d2 <HAL_CAN_IRQHandler+0x334>
 8001074:	2b50      	cmp	r3, #80	; 0x50
 8001076:	d022      	beq.n	80010be <HAL_CAN_IRQHandler+0x320>
 8001078:	2b50      	cmp	r3, #80	; 0x50
 800107a:	d82a      	bhi.n	80010d2 <HAL_CAN_IRQHandler+0x334>
 800107c:	2b40      	cmp	r3, #64	; 0x40
 800107e:	d019      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x316>
 8001080:	2b40      	cmp	r3, #64	; 0x40
 8001082:	d826      	bhi.n	80010d2 <HAL_CAN_IRQHandler+0x334>
 8001084:	2b30      	cmp	r3, #48	; 0x30
 8001086:	d010      	beq.n	80010aa <HAL_CAN_IRQHandler+0x30c>
 8001088:	2b30      	cmp	r3, #48	; 0x30
 800108a:	d822      	bhi.n	80010d2 <HAL_CAN_IRQHandler+0x334>
 800108c:	2b10      	cmp	r3, #16
 800108e:	d002      	beq.n	8001096 <HAL_CAN_IRQHandler+0x2f8>
 8001090:	2b20      	cmp	r3, #32
 8001092:	d005      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001094:	e01d      	b.n	80010d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800109e:	e019      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a8:	e014      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b2:	e00f      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010bc:	e00a      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010c6:	e005      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010d0:	e000      	b.n	80010d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80010d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2204      	movs	r2, #4
 80010ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f872 	bl	80011e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e14e      	b.n	80016ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8140 	beq.w	80016c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x40>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d017      	beq.n	80014fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d123      	bne.n	8001552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	6939      	ldr	r1, [r7, #16]
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0203 	and.w	r2, r3, #3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 809a 	beq.w	80016c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a54      	ldr	r2, [pc, #336]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b52      	ldr	r3, [pc, #328]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015d6:	d013      	beq.n	8001600 <HAL_GPIO_Init+0x1e0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <HAL_GPIO_Init+0x2d4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1dc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_GPIO_Init+0x2d8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1d8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1d4>
 80015f0:	2303      	movs	r3, #3
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015f4:	2305      	movs	r3, #5
 80015f6:	e004      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_GPIO_Init+0x1e2>
 8001600:	2300      	movs	r3, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001612:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800166e:	4a24      	ldr	r2, [pc, #144]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f47f aea9 	bne.w	8001430 <HAL_GPIO_Init+0x10>
  }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e002      	b.n	8001728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43d9      	mvns	r1, r3
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	400b      	ands	r3, r1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800176e:	af00      	add	r7, sp, #0
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001778:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f001 b823 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 817d 	beq.w	8001a9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017a4:	4bbc      	ldr	r3, [pc, #752]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	4bb9      	ldr	r3, [pc, #740]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d15c      	bne.n	8001876 <HAL_RCC_OscConfig+0x10e>
 80017bc:	4bb6      	ldr	r3, [pc, #728]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d155      	bne.n	8001876 <HAL_RCC_OscConfig+0x10e>
 80017ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d102      	bne.n	80017fc <HAL_RCC_OscConfig+0x94>
 80017f6:	4ba8      	ldr	r3, [pc, #672]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0xc0>
 80017fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001800:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001814:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001818:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001824:	4b9c      	ldr	r3, [pc, #624]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800182c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001830:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001834:	fa92 f2a2 	rbit	r2, r2
 8001838:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800183c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 811f 	beq.w	8001a9c <HAL_RCC_OscConfig+0x334>
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8116 	bne.w	8001a9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f000 bfaf 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x12e>
 8001888:	4b83      	ldr	r3, [pc, #524]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e036      	b.n	8001904 <HAL_RCC_OscConfig+0x19c>
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x158>
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a78      	ldr	r2, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e021      	b.n	8001904 <HAL_RCC_OscConfig+0x19c>
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x184>
 80018d2:	4b71      	ldr	r3, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a70      	ldr	r2, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6d      	ldr	r2, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x19c>
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a69      	ldr	r2, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f023 020f 	bic.w	r2, r3, #15
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	495f      	ldr	r1, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 800191a:	4313      	orrs	r3, r2
 800191c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d059      	beq.n	80019e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7fe feb5 	bl	800069c <HAL_GetTick>
 8001932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe feb0 	bl	800069c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d902      	bls.n	800194e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	f000 bf43 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001962:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0x218>
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e015      	b.n	80019ac <HAL_RCC_OscConfig+0x244>
 8001980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001984:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001998:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800199c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019a8:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019b8:	fa92 f2a2 	rbit	r2, r2
 80019bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ab      	beq.n	8001938 <HAL_RCC_OscConfig+0x1d0>
 80019e0:	e05d      	b.n	8001a9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7fe fe5b 	bl	800069c <HAL_GetTick>
 80019e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7fe fe56 	bl	800069c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d902      	bls.n	8001a02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f000 bee9 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 8001a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2cc>
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e015      	b.n	8001a60 <HAL_RCC_OscConfig+0x2f8>
 8001a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a6c:	fa92 f2a2 	rbit	r2, r2
 8001a70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ab      	bne.n	80019ec <HAL_RCC_OscConfig+0x284>
 8001a94:	e003      	b.n	8001a9e <HAL_RCC_OscConfig+0x336>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 817d 	beq.w	8001dae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ab4:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ac0:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d172      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x44a>
 8001acc:	4ba0      	ldr	r3, [pc, #640]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d16c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x44a>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001aea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3a0>
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c8>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2202      	movs	r2, #2
 8001b32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_RCC_OscConfig+0x410>
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f000 be2e 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	21f8      	movs	r1, #248	; 0xf8
 8001b8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b96:	fa91 f1a1 	rbit	r1, r1
 8001b9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ba2:	fab1 f181 	clz	r1, r1
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	408b      	lsls	r3, r1
 8001baa:	4969      	ldr	r1, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb0:	e0fd      	b.n	8001dae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8088 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x56c>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	461a      	mov	r2, r3
 8001bec:	2301      	movs	r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe fd54 	bl	800069c <HAL_GetTick>
 8001bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7fe fd4f 	bl	800069c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d902      	bls.n	8001c10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	f000 bde2 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4d8>
 8001c3a:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x500>
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c7e:	fab2 f282 	clz	r2, r2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f042 0220 	orr.w	r2, r2, #32
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f002 021f 	and.w	r2, r2, #31
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0af      	beq.n	8001bfa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	21f8      	movs	r1, #248	; 0xf8
 8001cb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cb8:	fa91 f1a1 	rbit	r1, r1
 8001cbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001cc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001cc4:	fab1 f181 	clz	r1, r1
 8001cc8:	b2c9      	uxtb	r1, r1
 8001cca:	408b      	lsls	r3, r1
 8001ccc:	4920      	ldr	r1, [pc, #128]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
 8001cd2:	e06c      	b.n	8001dae <HAL_RCC_OscConfig+0x646>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ce6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fccc 	bl	800069c <HAL_GetTick>
 8001d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7fe fcc7 	bl	800069c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d902      	bls.n	8001d20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f000 bd5a 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d104      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5ec>
 8001d4a:	4b01      	ldr	r3, [pc, #4]	; (8001d50 <HAL_RCC_OscConfig+0x5e8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e015      	b.n	8001d7c <HAL_RCC_OscConfig+0x614>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d66:	2302      	movs	r3, #2
 8001d68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d78:	4bc8      	ldr	r3, [pc, #800]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d86:	fa92 f2a2 	rbit	r2, r2
 8001d8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ad      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8110 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d079      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x760>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4bab      	ldr	r3, [pc, #684]	; (80020a0 <HAL_RCC_OscConfig+0x938>)
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fc4d 	bl	800069c <HAL_GetTick>
 8001e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7fe fc48 	bl	800069c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d902      	bls.n	8001e1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f000 bcdb 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e38:	2202      	movs	r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8001e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e84:	2102      	movs	r1, #2
 8001e86:	6019      	str	r1, [r3, #0]
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f1a3 	rbit	r1, r3
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e9e:	6019      	str	r1, [r3, #0]
  return result;
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0a0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x6a0>
 8001ec6:	e08d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x87c>
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eea:	601a      	str	r2, [r3, #0]
  return result;
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ef4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x938>)
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	2300      	movs	r3, #0
 8001f08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fbc7 	bl	800069c <HAL_GetTick>
 8001f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7fe fbc2 	bl	800069c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d902      	bls.n	8001f2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f000 bc55 	b.w	80027d4 <HAL_RCC_OscConfig+0x106c>
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8001f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	6019      	str	r1, [r3, #0]
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f1a3 	rbit	r1, r3
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fbc:	6019      	str	r1, [r3, #0]
  return result;
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d197      	bne.n	8001f14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 81a1 	beq.w	800233c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_RCC_OscConfig+0x934>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	61d3      	str	r3, [r2, #28]
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_OscConfig+0x934>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002032:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x93c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_RCC_OscConfig+0x93c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_RCC_OscConfig+0x93c>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fb23 	bl	800069c <HAL_GetTick>
 8002056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fb1e 	bl	800069c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e3b1      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_RCC_OscConfig+0x93c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10d      	bne.n	80020a8 <HAL_RCC_OscConfig+0x940>
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_OscConfig+0x934>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a02      	ldr	r2, [pc, #8]	; (800209c <HAL_RCC_OscConfig+0x934>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e03c      	b.n	8002114 <HAL_RCC_OscConfig+0x9ac>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	10908120 	.word	0x10908120
 80020a4:	40007000 	.word	0x40007000
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x96a>
 80020b8:	4bc1      	ldr	r3, [pc, #772]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4ac0      	ldr	r2, [pc, #768]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4bbe      	ldr	r3, [pc, #760]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4abd      	ldr	r2, [pc, #756]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020ca:	f023 0304 	bic.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e020      	b.n	8002114 <HAL_RCC_OscConfig+0x9ac>
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x994>
 80020e2:	4bb7      	ldr	r3, [pc, #732]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4ab6      	ldr	r2, [pc, #728]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4bb4      	ldr	r3, [pc, #720]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4ab3      	ldr	r2, [pc, #716]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x9ac>
 80020fc:	4bb0      	ldr	r3, [pc, #704]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4aaf      	ldr	r2, [pc, #700]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	4bad      	ldr	r3, [pc, #692]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4aac      	ldr	r2, [pc, #688]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8081 	beq.w	8002228 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fab9 	bl	800069c <HAL_GetTick>
 800212a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fab4 	bl	800069c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e345      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002150:	2202      	movs	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800218e:	601a      	str	r2, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002198:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0xa4c>
 80021ae:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0xa74>
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021e4:	2102      	movs	r1, #2
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fa92 f1a2 	rbit	r1, r2
 80021f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021fe:	6011      	str	r1, [r2, #0]
  return result;
 8002200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002204:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d084      	beq.n	8002130 <HAL_RCC_OscConfig+0x9c8>
 8002226:	e07f      	b.n	8002328 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7fe fa38 	bl	800069c <HAL_GetTick>
 800222c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fa33 	bl	800069c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e2c4      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002252:	2202      	movs	r2, #2
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800229a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0xb4e>
 80022b0:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	e013      	b.n	80022de <HAL_RCC_OscConfig+0xb76>
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022e6:	2102      	movs	r1, #2
 80022e8:	6011      	str	r1, [r2, #0]
 80022ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	fa92 f1a2 	rbit	r1, r2
 80022f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002300:	6011      	str	r1, [r2, #0]
  return result;
 8002302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002306:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f002 021f 	and.w	r2, r2, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d184      	bne.n	8002232 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002328:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8242 	beq.w	80027d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_OscConfig+0xc58>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	f000 8213 	beq.w	8002782 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b02      	cmp	r3, #2
 800236a:	f040 8162 	bne.w	8002632 <HAL_RCC_OscConfig+0xeca>
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800237a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002392:	601a      	str	r2, [r3, #0]
  return result;
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800239c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	2300      	movs	r3, #0
 80023b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe f972 	bl	800069c <HAL_GetTick>
 80023b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e00c      	b.n	80023d8 <HAL_RCC_OscConfig+0xc70>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe f96a 	bl	800069c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1fd      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f2a3 	rbit	r2, r3
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023fc:	601a      	str	r2, [r3, #0]
  return result;
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002406:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_RCC_OscConfig+0xcba>
 800241c:	4bb0      	ldr	r3, [pc, #704]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	e027      	b.n	8002472 <HAL_RCC_OscConfig+0xd0a>
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800242a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	4b9c      	ldr	r3, [pc, #624]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002476:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800247a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800247e:	6011      	str	r1, [r2, #0]
 8002480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002484:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	fa92 f1a2 	rbit	r1, r2
 800248e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002492:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002496:	6011      	str	r1, [r2, #0]
  return result;
 8002498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800249c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d182      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	430b      	orrs	r3, r1
 80024e0:	497f      	ldr	r1, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002514:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	461a      	mov	r2, r3
 8002528:	2301      	movs	r3, #1
 800252a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe f8b6 	bl	800069c <HAL_GetTick>
 8002530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e009      	b.n	800254a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe f8b1 	bl	800069c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e144      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0xe2c>
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e027      	b.n	80025e4 <HAL_RCC_OscConfig+0xe7c>
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f0:	6011      	str	r1, [r2, #0]
 80025f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	fa92 f1a2 	rbit	r1, r2
 8002600:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002604:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002608:	6011      	str	r1, [r2, #0]
  return result;
 800260a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800260e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f002 021f 	and.w	r2, r2, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d082      	beq.n	8002536 <HAL_RCC_OscConfig+0xdce>
 8002630:	e0cf      	b.n	80027d2 <HAL_RCC_OscConfig+0x106a>
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800263a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002660:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800266c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	461a      	mov	r2, r3
 8002674:	2300      	movs	r3, #0
 8002676:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f810 	bl	800069c <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe f80b 	bl	800069c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e09e      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800269e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026ba:	601a      	str	r2, [r3, #0]
  return result;
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d104      	bne.n	80026e4 <HAL_RCC_OscConfig+0xf7c>
 80026da:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <HAL_RCC_OscConfig+0xf78>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	e029      	b.n	8002734 <HAL_RCC_OscConfig+0xfcc>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_OscConfig+0x1078>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002738:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800273c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002746:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	fa92 f1a2 	rbit	r1, r2
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002758:	6011      	str	r1, [r2, #0]
  return result;
 800275a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d180      	bne.n	8002682 <HAL_RCC_OscConfig+0xf1a>
 8002780:	e027      	b.n	80027d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01e      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_OscConfig+0x1078>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800279e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b09e      	sub	sp, #120	; 0x78
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e162      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	498b      	ldr	r1, [pc, #556]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e14a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b82      	ldr	r3, [pc, #520]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	497f      	ldr	r1, [pc, #508]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80dc 	beq.w	8002a10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d13c      	bne.n	80028da <HAL_RCC_ClockConfig+0xf6>
 8002860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002864:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_RCC_ClockConfig+0xa6>
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e00f      	b.n	80028aa <HAL_RCC_ClockConfig+0xc6>
 800288a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	667b      	str	r3, [r7, #100]	; 0x64
 8002898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289c:	663b      	str	r3, [r7, #96]	; 0x60
 800289e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80028b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028b2:	fa92 f2a2 	rbit	r2, r2
 80028b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f002 021f 	and.w	r2, r2, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f202 	lsl.w	r2, r1, r2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d17b      	bne.n	80029ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0f3      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d13c      	bne.n	800295c <HAL_RCC_ClockConfig+0x178>
 80028e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_RCC_ClockConfig+0x128>
 8002906:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	e00f      	b.n	800292c <HAL_RCC_ClockConfig+0x148>
 800290c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002910:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
 8002920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002928:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002930:	63ba      	str	r2, [r7, #56]	; 0x38
 8002932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002934:	fa92 f2a2 	rbit	r2, r2
 8002938:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800293a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d13a      	bne.n	80029ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b2      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
 800295c:	2302      	movs	r3, #2
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_RCC_ClockConfig+0x1a0>
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e00d      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1bc>
 8002984:	2302      	movs	r3, #2
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	61ba      	str	r2, [r7, #24]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	617a      	str	r2, [r7, #20]
  return result;
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f042 0220 	orr.w	r2, r2, #32
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e079      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	491a      	ldr	r1, [pc, #104]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fd fe5c 	bl	800069c <HAL_GetTick>
 80029e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fd fe58 	bl	800069c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e061      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d214      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4906      	ldr	r1, [pc, #24]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e040      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2de>
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCC_ClockConfig+0x2e8>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	491a      	ldr	r1, [pc, #104]	; (8002acc <HAL_RCC_ClockConfig+0x2e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_ClockConfig+0x2e8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4912      	ldr	r1, [pc, #72]	; (8002acc <HAL_RCC_ClockConfig+0x2e8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a86:	f000 f829 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_RCC_ClockConfig+0x2e8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a94:	22f0      	movs	r2, #240	; 0xf0
 8002a96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	fa92 f2a2 	rbit	r2, r2
 8002a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	40d3      	lsrs	r3, r2
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x2ec>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fdaa 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3778      	adds	r7, #120	; 0x78
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	08002c20 	.word	0x08002c20
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b08b      	sub	sp, #44	; 0x2c
 8002ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x30>
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x36>
 8002b0a:	e03c      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	e03c      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	607a      	str	r2, [r7, #4]
  return result;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	220f      	movs	r2, #15
 8002b40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	60fa      	str	r2, [r7, #12]
  return result;
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	40d3      	lsrs	r3, r2
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	e004      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	623b      	str	r3, [r7, #32]
      break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b88:	623b      	str	r3, [r7, #32]
      break;
 8002b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	372c      	adds	r7, #44	; 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	08002c30 	.word	0x08002c30
 8002ba8:	08002c40 	.word	0x08002c40
 8002bac:	003d0900 	.word	0x003d0900

08002bb0 <memset>:
 8002bb0:	4402      	add	r2, r0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	; (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	; (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 f818 	bl	8002c08 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c50 	.word	0x08002c50
 8002bfc:	08002c50 	.word	0x08002c50
 8002c00:	08002c50 	.word	0x08002c50
 8002c04:	08002c54 	.word	0x08002c54

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
