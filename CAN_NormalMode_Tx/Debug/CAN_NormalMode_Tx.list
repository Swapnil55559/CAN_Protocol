
CAN_NormalMode_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002534  08002534  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002534  08002534  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002534  08002534  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005531  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011f2  00000000  00000000  000255b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000528  00000000  00000000  000267a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003c0  00000000  00000000  00026cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001944c  00000000  00000000  00027090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006544  00000000  00000000  000404dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00094a2a  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000136c  00000000  00000000  000db44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000dc7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024ec 	.word	0x080024ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024ec 	.word	0x080024ec

080001c8 <HAL_GPIO_EXTI_Callback>:
uint8_t TxData[8];

uint8_t flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b40      	cmp	r3, #64	; 0x40
 80001d6:	d109      	bne.n	80001ec <HAL_GPIO_EXTI_Callback+0x24>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80001da:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001dc:	4907      	ldr	r1, [pc, #28]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001de:	4808      	ldr	r0, [pc, #32]	; (8000200 <HAL_GPIO_EXTI_Callback+0x38>)
 80001e0:	f000 fb95 	bl	800090e <HAL_CAN_AddTxMessage>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001e4:	2108      	movs	r1, #8
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <HAL_GPIO_EXTI_Callback+0x3c>)
 80001e8:	f000 fefe 	bl	8000fe8 <HAL_GPIO_TogglePin>
	}
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000068 	.word	0x20000068
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	20000050 	.word	0x20000050
 8000200:	20000028 	.word	0x20000028
 8000204:	48000400 	.word	0x48000400

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020c:	f000 f9da 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000210:	f000 f830 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f000 f8a6 	bl	8000364 <MX_GPIO_Init>
  MX_CAN_Init();
 8000218:	f000 f86e 	bl	80002f8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800021c:	4811      	ldr	r0, [pc, #68]	; (8000264 <main+0x5c>)
 800021e:	f000 fb32 	bl	8000886 <HAL_CAN_Start>

  TxHeader.DLC = 2;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <main+0x60>)
 8000224:	2202      	movs	r2, #2
 8000226:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0x60>)
 800022a:	2200      	movs	r2, #0
 800022c:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x60>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0x60>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x303;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x60>)
 800023c:	f240 3203 	movw	r2, #771	; 0x303
 8000240:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	751a      	strb	r2, [r3, #20]

  TxData[0] = 4;
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x64>)
 800024a:	2204      	movs	r2, #4
 800024c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 200;
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <main+0x64>)
 8000250:	22c8      	movs	r2, #200	; 0xc8
 8000252:	705a      	strb	r2, [r3, #1]

  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <main+0x68>)
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <main+0x64>)
 8000258:	4903      	ldr	r1, [pc, #12]	; (8000268 <main+0x60>)
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <main+0x5c>)
 800025c:	f000 fb57 	bl	800090e <HAL_CAN_AddTxMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x58>
 8000262:	bf00      	nop
 8000264:	20000028 	.word	0x20000028
 8000268:	20000050 	.word	0x20000050
 800026c:	2000006c 	.word	0x2000006c
 8000270:	20000068 	.word	0x20000068

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f906 	bl	8002494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fec9 	bl	800104c <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c0:	f000 f8a4 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fef2 	bl	80020c8 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ea:	f000 f88f 	bl	800040c <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	; 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_CAN_Init+0x64>)
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <MX_CAN_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_CAN_Init+0x64>)
 8000304:	2204      	movs	r2, #4
 8000306:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800030e:	4b13      	ldr	r3, [pc, #76]	; (800035c <MX_CAN_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_CAN_Init+0x64>)
 8000316:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800031a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_CAN_Init+0x64>)
 800031e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000322:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <MX_CAN_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_CAN_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <MX_CAN_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_CAN_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <MX_CAN_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_CAN_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_CAN_Init+0x64>)
 800034a:	f000 f9a1 	bl	8000690 <HAL_CAN_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000354:	f000 f85a 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000028 	.word	0x20000028
 8000360:	40006400 	.word	0x40006400

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_GPIO_Init+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a21      	ldr	r2, [pc, #132]	; (8000404 <MX_GPIO_Init+0xa0>)
 8000380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <MX_GPIO_Init+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_GPIO_Init+0xa0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <MX_GPIO_Init+0xa0>)
 8000398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_GPIO_Init+0xa0>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2108      	movs	r1, #8
 80003ae:	4816      	ldr	r0, [pc, #88]	; (8000408 <MX_GPIO_Init+0xa4>)
 80003b0:	f000 fe02 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003b4:	2308      	movs	r3, #8
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <MX_GPIO_Init+0xa4>)
 80003cc:	f000 fc82 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80003d0:	2340      	movs	r3, #64	; 0x40
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003da:	2302      	movs	r3, #2
 80003dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	4619      	mov	r1, r3
 80003e4:	4808      	ldr	r0, [pc, #32]	; (8000408 <MX_GPIO_Init+0xa4>)
 80003e6:	f000 fc75 	bl	8000cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2017      	movs	r0, #23
 80003f0:	f000 fc39 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003f4:	2017      	movs	r0, #23
 80003f6:	f000 fc52 	bl	8000c9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	48000400 	.word	0x48000400

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x44>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_MspInit+0x44>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <HAL_MspInit+0x44>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <HAL_CAN_MspInit+0x80>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d129      	bne.n	80004d6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_CAN_MspInit+0x84>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	2303      	movs	r3, #3
 80004c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004c4:	2309      	movs	r3, #9
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f000 fbff 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40006400 	.word	0x40006400
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f88c 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000540:	2040      	movs	r0, #64	; 0x40
 8000542:	f000 fd6b 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f001 ff81 	bl	80024a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe31 	bl	8000208 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	0800253c 	.word	0x0800253c
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	20000078 	.word	0x20000078

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 fb3b 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff ff1a 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fb53 	bl	8000cba <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 fb1b 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	20000074 	.word	0x20000074

08000678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;  
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000074 	.word	0x20000074

08000690 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e0ed      	b.n	800087e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fed6 	bl	8000460 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 0201 	orr.w	r2, r2, #1
 80006c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006c4:	f7ff ffd8 	bl	8000678 <HAL_GetTick>
 80006c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ca:	e012      	b.n	80006f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006cc:	f7ff ffd4 	bl	8000678 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d90b      	bls.n	80006f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2205      	movs	r2, #5
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0c5      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e5      	beq.n	80006cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0202 	bic.w	r2, r2, #2
 800070e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000710:	f7ff ffb2 	bl	8000678 <HAL_GetTick>
 8000714:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000716:	e012      	b.n	800073e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000718:	f7ff ffae 	bl	8000678 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b0a      	cmp	r3, #10
 8000724:	d90b      	bls.n	800073e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2205      	movs	r2, #5
 8000736:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e09f      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e5      	bne.n	8000718 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7e1b      	ldrb	r3, [r3, #24]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7e5b      	ldrb	r3, [r3, #25]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7e9b      	ldrb	r3, [r3, #26]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0220 	orr.w	r2, r2, #32
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0220 	bic.w	r2, r2, #32
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7edb      	ldrb	r3, [r3, #27]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0210 	bic.w	r2, r2, #16
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 0210 	orr.w	r2, r2, #16
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7f1b      	ldrb	r3, [r3, #28]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f042 0208 	orr.w	r2, r2, #8
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e007      	b.n	800081e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f022 0208 	bic.w	r2, r2, #8
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7f5b      	ldrb	r3, [r3, #29]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f042 0204 	orr.w	r2, r2, #4
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e007      	b.n	8000848 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0204 	bic.w	r2, r2, #4
 8000846:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	ea42 0103 	orr.w	r1, r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b01      	cmp	r3, #1
 8000898:	d12e      	bne.n	80008f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2202      	movs	r2, #2
 800089e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f022 0201 	bic.w	r2, r2, #1
 80008b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80008b2:	f7ff fee1 	bl	8000678 <HAL_GetTick>
 80008b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80008b8:	e012      	b.n	80008e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ba:	f7ff fedd 	bl	8000678 <HAL_GetTick>
 80008be:	4602      	mov	r2, r0
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d90b      	bls.n	80008e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2205      	movs	r2, #5
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e012      	b.n	8000906 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1e5      	bne.n	80008ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	e006      	b.n	8000906 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
  }
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800090e:	b480      	push	{r7}
 8000910:	b089      	sub	sp, #36	; 0x24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000922:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800092c:	7ffb      	ldrb	r3, [r7, #31]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d003      	beq.n	800093a <HAL_CAN_AddTxMessage+0x2c>
 8000932:	7ffb      	ldrb	r3, [r7, #31]
 8000934:	2b02      	cmp	r3, #2
 8000936:	f040 80ad 	bne.w	8000a94 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800094a:	2b00      	cmp	r3, #0
 800094c:	d105      	bne.n	800095a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000954:	2b00      	cmp	r3, #0
 8000956:	f000 8095 	beq.w	8000a84 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	0e1b      	lsrs	r3, r3, #24
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000964:	2201      	movs	r2, #1
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	409a      	lsls	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10d      	bne.n	8000992 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000980:	68f9      	ldr	r1, [r7, #12]
 8000982:	6809      	ldr	r1, [r1, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3318      	adds	r3, #24
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	440b      	add	r3, r1
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e00f      	b.n	80009b2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800099c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009a2:	68f9      	ldr	r1, [r7, #12]
 80009a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80009a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3318      	adds	r3, #24
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	440b      	add	r3, r1
 80009b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	691a      	ldr	r2, [r3, #16]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3318      	adds	r3, #24
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	440b      	add	r3, r1
 80009c2:	3304      	adds	r3, #4
 80009c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	7d1b      	ldrb	r3, [r3, #20]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d111      	bne.n	80009f2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3318      	adds	r3, #24
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	4413      	add	r3, r2
 80009da:	3304      	adds	r3, #4
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3318      	adds	r3, #24
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	440b      	add	r3, r1
 80009ee:	3304      	adds	r3, #4
 80009f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3307      	adds	r3, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	061a      	lsls	r2, r3, #24
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3306      	adds	r3, #6
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3305      	adds	r3, #5
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	3204      	adds	r2, #4
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	4610      	mov	r0, r2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	6811      	ldr	r1, [r2, #0]
 8000a1a:	ea43 0200 	orr.w	r2, r3, r0
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	440b      	add	r3, r1
 8000a24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3303      	adds	r3, #3
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	061a      	lsls	r2, r3, #24
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3302      	adds	r3, #2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	041b      	lsls	r3, r3, #16
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	4313      	orrs	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	6811      	ldr	r1, [r2, #0]
 8000a50:	ea43 0200 	orr.w	r2, r3, r0
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	440b      	add	r3, r1
 8000a5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3318      	adds	r3, #24
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	6811      	ldr	r1, [r2, #0]
 8000a72:	f043 0201 	orr.w	r2, r3, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3318      	adds	r3, #24
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	440b      	add	r3, r1
 8000a7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e00e      	b.n	8000aa2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e006      	b.n	8000aa2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
  }
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff3e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff31 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e14e      	b.n	8000f82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8140 	beq.w	8000f7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 809a 	beq.w	8000f7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e60:	4a50      	ldr	r2, [pc, #320]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d013      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2d4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00d      	beq.n	8000eb0 <HAL_GPIO_Init+0x1dc>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d007      	beq.n	8000eac <HAL_GPIO_Init+0x1d8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a44      	ldr	r2, [pc, #272]	; (8000fb0 <HAL_GPIO_Init+0x2dc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <HAL_GPIO_Init+0x1d4>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x1e2>
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x1e2>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x1e2>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x1e2>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec6:	4937      	ldr	r1, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef8:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f22:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f47f aea9 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	48000c00 	.word	0x48000c00
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43d9      	mvns	r1, r3
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	400b      	ands	r3, r1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8c4 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001052:	af00      	add	r7, sp, #0
 8001054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f001 b823 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 817d 	beq.w	8001382 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001088:	4bbc      	ldr	r3, [pc, #752]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b04      	cmp	r3, #4
 8001092:	d00c      	beq.n	80010ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001094:	4bb9      	ldr	r3, [pc, #740]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d15c      	bne.n	800115a <HAL_RCC_OscConfig+0x10e>
 80010a0:	4bb6      	ldr	r3, [pc, #728]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d155      	bne.n	800115a <HAL_RCC_OscConfig+0x10e>
 80010ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_RCC_OscConfig+0x94>
 80010da:	4ba8      	ldr	r3, [pc, #672]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0xc0>
 80010e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001108:	4b9c      	ldr	r3, [pc, #624]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001110:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001114:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001118:	fa92 f2a2 	rbit	r2, r2
 800111c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001120:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001124:	fab2 f282 	clz	r2, r2
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f042 0220 	orr.w	r2, r2, #32
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f002 021f 	and.w	r2, r2, #31
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 811f 	beq.w	8001380 <HAL_RCC_OscConfig+0x334>
 8001142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 8116 	bne.w	8001380 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f000 bfaf 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116a:	d106      	bne.n	800117a <HAL_RCC_OscConfig+0x12e>
 800116c:	4b83      	ldr	r3, [pc, #524]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a82      	ldr	r2, [pc, #520]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e036      	b.n	80011e8 <HAL_RCC_OscConfig+0x19c>
 800117a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x158>
 800118a:	4b7c      	ldr	r3, [pc, #496]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7b      	ldr	r2, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b79      	ldr	r3, [pc, #484]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a78      	ldr	r2, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e021      	b.n	80011e8 <HAL_RCC_OscConfig+0x19c>
 80011a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x184>
 80011b6:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a70      	ldr	r2, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b6e      	ldr	r3, [pc, #440]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6d      	ldr	r2, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0x19c>
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a69      	ldr	r2, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a66      	ldr	r2, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f023 020f 	bic.w	r2, r3, #15
 80011f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	495f      	ldr	r1, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x330>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d059      	beq.n	80012c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fa31 	bl	8000678 <HAL_GetTick>
 8001216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fa2c 	bl	8000678 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b64      	cmp	r3, #100	; 0x64
 800122a:	d902      	bls.n	8001232 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	f000 bf43 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001236:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001246:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x218>
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e015      	b.n	8001290 <HAL_RCC_OscConfig+0x244>
 8001264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001268:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001280:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x330>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001294:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001298:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800129c:	fa92 f2a2 	rbit	r2, r2
 80012a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012a8:	fab2 f282 	clz	r2, r2
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f042 0220 	orr.w	r2, r2, #32
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f002 021f 	and.w	r2, r2, #31
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f202 	lsl.w	r2, r1, r2
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ab      	beq.n	800121c <HAL_RCC_OscConfig+0x1d0>
 80012c4:	e05d      	b.n	8001382 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff f9d7 	bl	8000678 <HAL_GetTick>
 80012ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff f9d2 	bl	8000678 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	; 0x64
 80012de:	d902      	bls.n	80012e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f000 bee9 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	095b      	lsrs	r3, r3, #5
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <HAL_RCC_OscConfig+0x2cc>
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	e015      	b.n	8001344 <HAL_RCC_OscConfig+0x2f8>
 8001318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001334:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_RCC_OscConfig+0x330>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001348:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800134c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001350:	fa92 f2a2 	rbit	r2, r2
 8001354:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001358:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800135c:	fab2 f282 	clz	r2, r2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f042 0220 	orr.w	r2, r2, #32
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f002 021f 	and.w	r2, r2, #31
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ab      	bne.n	80012d0 <HAL_RCC_OscConfig+0x284>
 8001378:	e003      	b.n	8001382 <HAL_RCC_OscConfig+0x336>
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 817d 	beq.w	8001692 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001398:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a4:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d172      	bne.n	8001496 <HAL_RCC_OscConfig+0x44a>
 80013b0:	4ba0      	ldr	r3, [pc, #640]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d16c      	bne.n	8001496 <HAL_RCC_OscConfig+0x44a>
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	095b      	lsrs	r3, r3, #5
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <HAL_RCC_OscConfig+0x3a0>
 80013e6:	4b93      	ldr	r3, [pc, #588]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	e013      	b.n	8001414 <HAL_RCC_OscConfig+0x3c8>
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001404:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	2202      	movs	r2, #2
 8001416:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800141a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800141e:	fa92 f2a2 	rbit	r2, r2
 8001422:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001426:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f002 021f 	and.w	r2, r2, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <HAL_RCC_OscConfig+0x410>
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d002      	beq.n	800145c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f000 be2e 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b75      	ldr	r3, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	21f8      	movs	r1, #248	; 0xf8
 8001472:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800147a:	fa91 f1a1 	rbit	r1, r1
 800147e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001482:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001486:	fab1 f181 	clz	r1, r1
 800148a:	b2c9      	uxtb	r1, r1
 800148c:	408b      	lsls	r3, r1
 800148e:	4969      	ldr	r1, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001494:	e0fd      	b.n	8001692 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8088 	beq.w	80015b8 <HAL_RCC_OscConfig+0x56c>
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	461a      	mov	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff f8d0 	bl	8000678 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff f8cb 	bl	8000678 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d902      	bls.n	80014f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f000 bde2 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001506:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x4d8>
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	e013      	b.n	800154c <HAL_RCC_OscConfig+0x500>
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800153c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2202      	movs	r2, #2
 800154e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001552:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001556:	fa92 f2a2 	rbit	r2, r2
 800155a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800155e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001562:	fab2 f282 	clz	r2, r2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	f042 0220 	orr.w	r2, r2, #32
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f002 021f 	and.w	r2, r2, #31
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0af      	beq.n	80014de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	21f8      	movs	r1, #248	; 0xf8
 8001594:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800159c:	fa91 f1a1 	rbit	r1, r1
 80015a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015a8:	fab1 f181 	clz	r1, r1
 80015ac:	b2c9      	uxtb	r1, r1
 80015ae:	408b      	lsls	r3, r1
 80015b0:	4920      	ldr	r1, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
 80015b6:	e06c      	b.n	8001692 <HAL_RCC_OscConfig+0x646>
 80015b8:	2301      	movs	r3, #1
 80015ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	461a      	mov	r2, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff f848 	bl	8000678 <HAL_GetTick>
 80015e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff f843 	bl	8000678 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d902      	bls.n	8001604 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 bd5a 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d104      	bne.n	8001638 <HAL_RCC_OscConfig+0x5ec>
 800162e:	4b01      	ldr	r3, [pc, #4]	; (8001634 <HAL_RCC_OscConfig+0x5e8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e015      	b.n	8001660 <HAL_RCC_OscConfig+0x614>
 8001634:	40021000 	.word	0x40021000
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800165c:	4bc8      	ldr	r3, [pc, #800]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	2202      	movs	r2, #2
 8001662:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001666:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001672:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ad      	bne.n	80015ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8110 	beq.w	80018c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d079      	beq.n	80017ac <HAL_RCC_OscConfig+0x760>
 80016b8:	2301      	movs	r3, #1
 80016ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	4bab      	ldr	r3, [pc, #684]	; (8001984 <HAL_RCC_OscConfig+0x938>)
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	461a      	mov	r2, r3
 80016de:	2301      	movs	r3, #1
 80016e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7fe ffc9 	bl	8000678 <HAL_GetTick>
 80016e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ec:	f7fe ffc4 	bl	8000678 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d902      	bls.n	8001702 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f000 bcdb 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800175a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001768:	2102      	movs	r1, #2
 800176a:	6019      	str	r1, [r3, #0]
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f1a3 	rbit	r1, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001782:	6019      	str	r1, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0a0      	beq.n	80016ec <HAL_RCC_OscConfig+0x6a0>
 80017aa:	e08d      	b.n	80018c8 <HAL_RCC_OscConfig+0x87c>
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ce:	601a      	str	r2, [r3, #0]
  return result;
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x938>)
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	2300      	movs	r3, #0
 80017ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7fe ff43 	bl	8000678 <HAL_GetTick>
 80017f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7fe ff3e 	bl	8000678 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d902      	bls.n	800180e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	f000 bc55 	b.w	80020b8 <HAL_RCC_OscConfig+0x106c>
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001816:	2202      	movs	r2, #2
 8001818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 800187c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001886:	2102      	movs	r1, #2
 8001888:	6019      	str	r1, [r3, #0]
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f1a3 	rbit	r1, r3
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018a0:	6019      	str	r1, [r3, #0]
  return result;
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d197      	bne.n	80017f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 81a1 	beq.w	8001c20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d116      	bne.n	800191e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001916:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x93c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11a      	bne.n	8001960 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x93c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_RCC_OscConfig+0x93c>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001936:	f7fe fe9f 	bl	8000678 <HAL_GetTick>
 800193a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	e009      	b.n	8001954 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7fe fe9a 	bl	8000678 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e3b1      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCC_OscConfig+0x93c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10d      	bne.n	800198c <HAL_RCC_OscConfig+0x940>
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a02      	ldr	r2, [pc, #8]	; (8001980 <HAL_RCC_OscConfig+0x934>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	e03c      	b.n	80019f8 <HAL_RCC_OscConfig+0x9ac>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	10908120 	.word	0x10908120
 8001988:	40007000 	.word	0x40007000
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x96a>
 800199c:	4bc1      	ldr	r3, [pc, #772]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4ac0      	ldr	r2, [pc, #768]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	4bbe      	ldr	r3, [pc, #760]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4abd      	ldr	r2, [pc, #756]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019ae:	f023 0304 	bic.w	r3, r3, #4
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	e020      	b.n	80019f8 <HAL_RCC_OscConfig+0x9ac>
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x994>
 80019c6:	4bb7      	ldr	r3, [pc, #732]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4ab6      	ldr	r2, [pc, #728]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4bb4      	ldr	r3, [pc, #720]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4ab3      	ldr	r2, [pc, #716]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0x9ac>
 80019e0:	4bb0      	ldr	r3, [pc, #704]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4aaf      	ldr	r2, [pc, #700]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	4bad      	ldr	r3, [pc, #692]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4aac      	ldr	r2, [pc, #688]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8081 	beq.w	8001b0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fe35 	bl	8000678 <HAL_GetTick>
 8001a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7fe fe30 	bl	8000678 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e345      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d102      	bne.n	8001a98 <HAL_RCC_OscConfig+0xa4c>
 8001a92:	4b84      	ldr	r3, [pc, #528]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	e013      	b.n	8001ac0 <HAL_RCC_OscConfig+0xa74>
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ac8:	2102      	movs	r1, #2
 8001aca:	6011      	str	r1, [r2, #0]
 8001acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	fa92 f1a2 	rbit	r1, r2
 8001ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ae2:	6011      	str	r1, [r2, #0]
  return result;
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f002 021f 	and.w	r2, r2, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d084      	beq.n	8001a14 <HAL_RCC_OscConfig+0x9c8>
 8001b0a:	e07f      	b.n	8001c0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7fe fdb4 	bl	8000678 <HAL_GetTick>
 8001b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe fdaf 	bl	8000678 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e2c4      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xb4e>
 8001b94:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	e013      	b.n	8001bc2 <HAL_RCC_OscConfig+0xb76>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001bca:	2102      	movs	r1, #2
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d184      	bne.n	8001b16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8242 	beq.w	80020b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_RCC_OscConfig+0xc58>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	f000 8213 	beq.w	8002066 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	f040 8162 	bne.w	8001f16 <HAL_RCC_OscConfig+0xeca>
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c76:	601a      	str	r2, [r3, #0]
  return result;
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fcee 	bl	8000678 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	e00c      	b.n	8001cbc <HAL_RCC_OscConfig+0xc70>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe fce6 	bl	8000678 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1fd      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ce0:	601a      	str	r2, [r3, #0]
  return result;
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_OscConfig+0xcba>
 8001d00:	4bb0      	ldr	r3, [pc, #704]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e027      	b.n	8001d56 <HAL_RCC_OscConfig+0xd0a>
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	4b9c      	ldr	r3, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d62:	6011      	str	r1, [r2, #0]
 8001d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	fa92 f1a2 	rbit	r1, r2
 8001d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d7a:	6011      	str	r1, [r2, #0]
  return result;
 8001d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d182      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	497f      	ldr	r1, [pc, #508]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dee:	601a      	str	r2, [r3, #0]
  return result;
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001df8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fc32 	bl	8000678 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fc2d 	bl	8000678 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e144      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_OscConfig+0xe2c>
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e027      	b.n	8001ec8 <HAL_RCC_OscConfig+0xe7c>
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ecc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed4:	6011      	str	r1, [r2, #0]
 8001ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fa92 f1a2 	rbit	r1, r2
 8001ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eec:	6011      	str	r1, [r2, #0]
  return result;
 8001eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d082      	beq.n	8001e1a <HAL_RCC_OscConfig+0xdce>
 8001f14:	e0cf      	b.n	80020b6 <HAL_RCC_OscConfig+0x106a>
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fb8c 	bl	8000678 <HAL_GetTick>
 8001f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe fb87 	bl	8000678 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e09e      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f9e:	601a      	str	r2, [r3, #0]
  return result;
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xf7c>
 8001fbe:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <HAL_RCC_OscConfig+0xf78>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e029      	b.n	8002018 <HAL_RCC_OscConfig+0xfcc>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x1078>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002024:	6011      	str	r1, [r2, #0]
 8002026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800202a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	fa92 f1a2 	rbit	r1, r2
 8002034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002038:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800203c:	6011      	str	r1, [r2, #0]
  return result;
 800203e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002042:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f002 021f 	and.w	r2, r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d180      	bne.n	8001f66 <HAL_RCC_OscConfig+0xf1a>
 8002064:	e027      	b.n	80020b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e01e      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_OscConfig+0x1078>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002086:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	429a      	cmp	r2, r3
 8002098:	d10b      	bne.n	80020b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800209a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800209e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b09e      	sub	sp, #120	; 0x78
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e162      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b90      	ldr	r3, [pc, #576]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	498b      	ldr	r1, [pc, #556]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e14a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	497f      	ldr	r1, [pc, #508]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80dc 	beq.w	80022f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d13c      	bne.n	80021be <HAL_RCC_ClockConfig+0xf6>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d102      	bne.n	800216e <HAL_RCC_ClockConfig+0xa6>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e00f      	b.n	800218e <HAL_RCC_ClockConfig+0xc6>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	667b      	str	r3, [r7, #100]	; 0x64
 800217c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
 8002182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002192:	65ba      	str	r2, [r7, #88]	; 0x58
 8002194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800219c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d17b      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0f3      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d13c      	bne.n	8002240 <HAL_RCC_ClockConfig+0x178>
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x128>
 80021ea:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_ClockConfig+0x148>
 80021f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
 80021fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002214:	63ba      	str	r2, [r7, #56]	; 0x38
 8002216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d13a      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b2      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002240:	2302      	movs	r3, #2
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e00d      	b.n	8002284 <HAL_RCC_ClockConfig+0x1bc>
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2202      	movs	r2, #2
 8002286:	61ba      	str	r2, [r7, #24]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	617a      	str	r2, [r7, #20]
  return result;
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e079      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	491a      	ldr	r1, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7fe f9d8 	bl	8000678 <HAL_GetTick>
 80022c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe f9d4 	bl	8000678 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e061      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d214      	bcs.n	800232c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4906      	ldr	r1, [pc, #24]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	491a      	ldr	r1, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236a:	f000 f829 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	22f0      	movs	r2, #240	; 0xf0
 800237a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	40d3      	lsrs	r3, r2
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x2f4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f926 	bl	80005f0 <HAL_InitTick>
  
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3778      	adds	r7, #120	; 0x78
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08002504 	.word	0x08002504
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b08b      	sub	sp, #44	; 0x2c
 80023c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ee:	e03c      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f2:	623b      	str	r3, [r7, #32]
      break;
 80023f4:	e03c      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	607a      	str	r2, [r7, #4]
  return result;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc0>)
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	220f      	movs	r2, #15
 8002424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	60fa      	str	r2, [r7, #12]
  return result;
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	40d3      	lsrs	r3, r2
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_RCC_GetSysClockFreq+0xcc>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e004      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	e002      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800246c:	623b      	str	r3, [r7, #32]
      break;
 800246e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002470:	6a3b      	ldr	r3, [r7, #32]
}
 8002472:	4618      	mov	r0, r3
 8002474:	372c      	adds	r7, #44	; 0x2c
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	007a1200 	.word	0x007a1200
 8002488:	08002514 	.word	0x08002514
 800248c:	08002524 	.word	0x08002524
 8002490:	003d0900 	.word	0x003d0900

08002494 <memset>:
 8002494:	4402      	add	r2, r0
 8002496:	4603      	mov	r3, r0
 8002498:	4293      	cmp	r3, r2
 800249a:	d100      	bne.n	800249e <memset+0xa>
 800249c:	4770      	bx	lr
 800249e:	f803 1b01 	strb.w	r1, [r3], #1
 80024a2:	e7f9      	b.n	8002498 <memset+0x4>

080024a4 <__libc_init_array>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4d0d      	ldr	r5, [pc, #52]	; (80024dc <__libc_init_array+0x38>)
 80024a8:	4c0d      	ldr	r4, [pc, #52]	; (80024e0 <__libc_init_array+0x3c>)
 80024aa:	1b64      	subs	r4, r4, r5
 80024ac:	10a4      	asrs	r4, r4, #2
 80024ae:	2600      	movs	r6, #0
 80024b0:	42a6      	cmp	r6, r4
 80024b2:	d109      	bne.n	80024c8 <__libc_init_array+0x24>
 80024b4:	4d0b      	ldr	r5, [pc, #44]	; (80024e4 <__libc_init_array+0x40>)
 80024b6:	4c0c      	ldr	r4, [pc, #48]	; (80024e8 <__libc_init_array+0x44>)
 80024b8:	f000 f818 	bl	80024ec <_init>
 80024bc:	1b64      	subs	r4, r4, r5
 80024be:	10a4      	asrs	r4, r4, #2
 80024c0:	2600      	movs	r6, #0
 80024c2:	42a6      	cmp	r6, r4
 80024c4:	d105      	bne.n	80024d2 <__libc_init_array+0x2e>
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024cc:	4798      	blx	r3
 80024ce:	3601      	adds	r6, #1
 80024d0:	e7ee      	b.n	80024b0 <__libc_init_array+0xc>
 80024d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d6:	4798      	blx	r3
 80024d8:	3601      	adds	r6, #1
 80024da:	e7f2      	b.n	80024c2 <__libc_init_array+0x1e>
 80024dc:	08002534 	.word	0x08002534
 80024e0:	08002534 	.word	0x08002534
 80024e4:	08002534 	.word	0x08002534
 80024e8:	08002538 	.word	0x08002538

080024ec <_init>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr

080024f8 <_fini>:
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fa:	bf00      	nop
 80024fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fe:	bc08      	pop	{r3}
 8002500:	469e      	mov	lr, r3
 8002502:	4770      	bx	lr
